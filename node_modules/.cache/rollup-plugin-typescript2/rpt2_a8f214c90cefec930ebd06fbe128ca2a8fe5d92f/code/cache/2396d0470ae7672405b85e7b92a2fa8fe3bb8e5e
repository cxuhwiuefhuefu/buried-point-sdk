{"code":"/*\r\n * @Author: Sunny\r\n * @Date: 2022-08-18 10:48:13\r\n * @LastEditors: Suuny\r\n * @LastEditTime: 2022-09-03 22:19:31\r\n * @Description:\r\n * @FilePath: /buried-point-sdk/src/core/index.ts\r\n */\r\nimport { TrackerConfig } from \"../types/index\";\r\nimport { createHistoryEvent } from '../utils/pv';\r\n// 需要监听的事件\r\nconst MouseEventList = ['click', 'dblclick', 'contextmenu', 'mousedown', 'mouseup', 'mouseenter', 'mouseout', 'mouseover'];\r\nexport default class Tracker {\r\n    constructor(options) {\r\n        this.data = Object.assign(this.initDef, options);\r\n        this.installTracker();\r\n    }\r\n    initDef() {\r\n        window.history['pushState'] = createHistoryEvent('pushState');\r\n        window.history['replaceState'] = createHistoryEvent('replaceState');\r\n        return {\r\n            sdkVersion: TrackerConfig.version,\r\n            historyTracker: false,\r\n            hashTracker: false,\r\n            domTracker: false,\r\n            jsError: false\r\n        };\r\n    }\r\n    setUserId(uuid) {\r\n        this.data.uuid = uuid;\r\n    }\r\n    setExtra(extra) {\r\n        this.data.extra = extra;\r\n    }\r\n    // 手动上报\r\n    sendTracker(data) {\r\n        this.reportTracker(data);\r\n    }\r\n    // dom 上报\r\n    targetKeyReport() {\r\n        console.log('dom 上报', MouseEventList);\r\n        MouseEventList.forEach(ev => {\r\n            window.addEventListener(ev, (e) => {\r\n                const target = e.target;\r\n                const targetKey = target.getAttribute('target-key');\r\n                console.log(\"target, targetKey\", target, targetKey);\r\n                if (targetKey) {\r\n                    this.reportTracker({\r\n                        event: ev,\r\n                        targetKey\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    // 事件捕获器 自动上报\r\n    captureEvents(MouseEventList, targetKey, data) {\r\n        MouseEventList.forEach(event => {\r\n            window.addEventListener(event, () => {\r\n                this.reportTracker({\r\n                    event,\r\n                    targetKey,\r\n                    data\r\n                });\r\n            });\r\n        });\r\n    }\r\n    // 注册监控事件\r\n    installTracker() {\r\n        console.log('this.data', this.data.historyTracker, this.data.hashTracker, this.data.domTracker, this.data.jsError);\r\n        if (this.data.historyTracker) {\r\n            console.log('触发 historyTracker');\r\n            this.installhandle();\r\n            this.captureEvents(['pushState', 'replaceState', 'popstate'], 'history-pv');\r\n        }\r\n        if (this.data.hashTracker) {\r\n            console.log('触发 hashTracker');\r\n            this.captureEvents(['hashchange'], 'hash-pv');\r\n        }\r\n        if (this.data.domTracker) {\r\n            this.targetKeyReport();\r\n        }\r\n        if (this.data.jsError) {\r\n            this.jsError();\r\n        }\r\n    }\r\n    // 原生不支持监听 history 的 pushState 和 replaceState 事件，手动添加事件监听\r\n    installhandle() {\r\n        const bindEventListener = (type) => {\r\n            const historyEvent = history[type];\r\n            return () => {\r\n                const newEvent = historyEvent.apply(this, arguments);\r\n                const e = new Event(type);\r\n                e.arguments = arguments;\r\n                window.dispatchEvent(e);\r\n                return newEvent;\r\n            };\r\n        };\r\n        history.pushState = bindEventListener('pushState');\r\n        history.replaceState = bindEventListener('replaceState');\r\n    }\r\n    // 监控错误事件\r\n    jsError() {\r\n        this.errorEvent();\r\n        this.promiseReject();\r\n    }\r\n    // 监听JS错误事件\r\n    errorEvent() {\r\n        window.addEventListener('error', (event) => {\r\n            this.reportTracker({\r\n                event: 'error',\r\n                targetkeyof: 'message',\r\n                message: event.message\r\n            });\r\n        });\r\n    }\r\n    // 监听promise \r\n    promiseReject() {\r\n        window.addEventListener('unhandledrejection', (event) => {\r\n            event.promise.catch(error => {\r\n                this.reportTracker({\r\n                    event: \"promise\",\r\n                    targetKey: 'message',\r\n                    message: error\r\n                });\r\n            });\r\n        });\r\n    }\r\n    // 上报方法\r\n    reportTracker(data) {\r\n        const params = Object.assign(this.data, data, { time: new Date().getTime() }); // 加个时间戳\r\n        let headers = {\r\n            type: \"application/x-www-form-urlencoded\"\r\n        };\r\n        let blob = new Blob([JSON.stringify(params)], headers);\r\n        navigator.sendBeacon(this.data.requestUrl, blob);\r\n    }\r\n}\r\n","references":["/Users/cmh/Desktop/selfProject/buried-point-sdk/src/types/index.ts","/Users/cmh/Desktop/selfProject/buried-point-sdk/src/utils/pv.ts"]}
